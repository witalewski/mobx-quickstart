{"version":3,"sources":["AppState.js","Greeter/GreeterStyled.js","Greeter/Greeter.js","App.js","serviceWorker.js","index.js"],"names":["AppState","concat","this","name","observable","action","_this","computed","GreeterStyled","styled","div","_templateObject","Greeter","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onNameChange","_ref","value","target","props","setName","input","createRef","current","focus","react_default","a","createElement","greeting","ref","type","onChange","Component","inject","_ref2","appState","observer","App","className","index_module","src_Greeter_Greeter","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uPAEMA,yKAQF,gBAAAC,OAAiBC,KAAKC,MAAQ,OAA9B,gDAPDC,6EAAkB,2CAElBC,yFAAiB,SAAAF,GAChBG,EAAKH,KAAOA,0CAGbI,6PCPI,IAAMC,QAAgBC,EAAOC,IAAVC,KCGpBC,cAOJ,SAAAA,IAAc,IAAAN,EAAA,OAAAO,OAAAC,EAAA,EAAAD,CAAAX,KAAAU,IACZN,EAAAO,OAAAE,EAAA,EAAAF,CAAAX,KAAAW,OAAAG,EAAA,EAAAH,CAAAD,GAAAK,KAAAf,QAQFgB,aAAe,SAAAC,GAA2B,IAAdC,EAAcD,EAAxBE,OAAUD,MAC1Bd,EAAKgB,MAAMC,QAAQH,IARnBd,EAAKkB,MAAQC,sBAFDnB,mFAMZJ,KAAKsB,MAAME,QAAQC,yCAQnB,OACEC,EAAAC,EAAAC,cAACtB,EAAD,KACEoB,EAAAC,EAAAC,cAAA,UAAK5B,KAAKoB,MAAMS,UAChBH,EAAAC,EAAAC,cAAA,wBACa,IACXF,EAAAC,EAAAC,cAAA,SACEE,IAAK9B,KAAKsB,MACVS,KAAK,OACLb,MAAOlB,KAAKoB,MAAMnB,KAClB+B,SAAUhC,KAAKgB,wBA9BLiB,aAuCPC,cAAO,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,SAAH,MAAmB,CACvCP,SAAUO,EAASP,SACnB5B,KAAMmC,EAASnC,KACfoB,QAASe,EAASf,UAHLa,CAIXG,YAAS3B,IC1BE4B,cAhBb,SAAAA,IAAc,IAAAlC,EAAA,OAAAO,OAAAC,EAAA,EAAAD,CAAAX,KAAAsC,IACZlC,EAAAO,OAAAE,EAAA,EAAAF,CAAAX,KAAAW,OAAAG,EAAA,EAAAH,CAAA2B,GAAAvB,KAAAf,QACKoC,SAAW,IAAItC,EAFRM,wEAMZ,OACEsB,EAAAC,EAAAC,cAAA,OAAKW,UAAU,OACbb,EAAAC,EAAAC,cAACY,EAAA,EAAD,CAAUJ,SAAUpC,KAAKoC,UACvBV,EAAAC,EAAAC,cAACa,EAAD,eAVQR,aCOES,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOtB,EAAAC,EAAAC,cAACqB,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.073f911f.chunk.js","sourcesContent":["import { observable, action, computed } from 'mobx';\n\nclass AppState {\n  @observable name = '';\n\n  @action setName = name => {\n    this.name = name;\n  };\n\n  @computed get greeting() {\n    return `Hello, ${this.name || 'User'}!`;\n  }\n}\n\nexport { AppState };\n","import styled from '@emotion/styled';\n\nexport const GreeterStyled = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`;\n","import React, { Component, createRef } from 'react';\nimport { observer, inject } from 'mobx-react';\nimport { string, func } from 'prop-types';\nimport { GreeterStyled } from './GreeterStyled';\n\nclass Greeter extends Component {\n  static propTypes = {\n    greeting: string.isRequired,\n    name: string.isRequired,\n    setName: func.isRequired,\n  };\n\n  constructor() {\n    super();\n    this.input = createRef();\n  }\n\n  componentDidMount() {\n    this.input.current.focus();\n  }\n\n  onNameChange = ({ target: { value } }) => {\n    this.props.setName(value);\n  };\n\n  render() {\n    return (\n      <GreeterStyled>\n        <h1>{this.props.greeting}</h1>\n        <div>\n          Your name:{' '}\n          <input\n            ref={this.input}\n            type=\"text\"\n            value={this.props.name}\n            onChange={this.onNameChange}\n          />\n        </div>\n      </GreeterStyled>\n    );\n  }\n}\n\nexport { Greeter };\nexport default inject(({ appState }) => ({\n  greeting: appState.greeting,\n  name: appState.name,\n  setName: appState.setName,\n}))(observer(Greeter));\n","import React, { Component } from 'react';\nimport { Provider } from 'mobx-react';\nimport { AppState } from './AppState';\nimport { Greeter } from './Greeter';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.appState = new AppState();\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Provider appState={this.appState}>\n          <Greeter />\n        </Provider>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}